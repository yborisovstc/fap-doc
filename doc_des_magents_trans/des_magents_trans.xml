<?xml version="1.0" ?>

<!DOCTYPE article SYSTEM "/usr/share/sgml/docbook/dtd/xml/4.5/docbookx.dtd">


<article> <title>Using mutliagents design approach in Discrete Event System transitions</title>
    <articleinfo>
	<author><personname><firstname>Yuri</firstname><surname>Borisov</surname></personname>
	    <email>yuri.borisov.v@gmail.com</email></author> 

	<abstract>
	    <simpara>The multiagents approach was offered for usage in discrete event system.
		The approach can be used for implementing system variables transition functions and even for
		implementing of other DES structural components.</simpara>
	    <simpara>The design and specifics of the implementation of multiagent framework is outlined. It is shown that
		using this approach creates convenient environment for specifying and running the systems</simpara>
	</abstract>

	<releaseinfo>Ver.0.01 at 01-Jun-2011</releaseinfo>

	<revhistory>
	    <revision> <revnumber>0.01</revnumber> <date>01-Jun-2012</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Initial version</revremark> </revision>
	</revhistory>
    </articleinfo>

    <bibliolist> <title>References</title>

	<biblioentry id="ref_wiki_ds"> <abbrev>WIKI_DS</abbrev>
	    <productname><ulink url="http://en.wikipedia.org/wiki/Dynamical_system"/></productname>
	    <title>Dynamical system. From Wikipedia, the free encyclopedia</title> </biblioentry>

	<biblioentry id="ref_cass_intr_des"> <abbrev>CASS_INTR_DES</abbrev>
	    <productname><ulink url="http://books.tr200.ru/v.php?id=242379"/></productname>
	    <title>Christos Cassandras, Stefane Lafortune. Introduction to Discrete Event System. </title> </biblioentry>

	<biblioentry id="ref_ybor_using_des"> <abbrev>YBOR_USING_DES_</abbrev>
	    <productname><ulink url="https://drive.google.com/file/d/0B2bCxkhiEc_ZWlNiWTNPQmhrOUk/edit?usp=sharing"/></productname>
	    <title>Y.Borisov, A.Lemekhova. Using of Synchronous Discrete Time System paradigm in software development</title> </biblioentry>

	<biblioentry id="ref_yb_embtr"> <abbrev>YB_EMBTR</abbrev>
	    <productname><ulink url="https://drive.google.com/file/d/0B2bCxkhiEc_ZV3NLZHlzc2lHa0k/edit?usp=sharing"/></productname>
	    <title>Y.Borisov. Using embedded transtion in Discrete Event System language interpreter</title> </biblioentry>

	<biblioentry id="ref_yb_deside1"> <abbrev>YB_DESIDE1</abbrev>
	    <productname><ulink url="https://drive.google.com/file/d/0B2bCxkhiEc_ZVjdZX0U4Tm0yeUU/edit?usp=sharing"/></productname>
	    <title>Yuri Borisov. Simple IDE for Discrete Events Systems framework.</title> </biblioentry>


	<biblioentry id="ref_fap_git"> <abbrev>FAP_GIT</abbrev>
	    <productname><ulink url="http://gitorious.org/fap"/></productname>
	    <title><xref linkend="gls_fap"/> project git repository</title> </biblioentry>


	<biblioentry id="ref_fap_demo_snails"> <abbrev>FAP_DEMO_SNAILS</abbrev>
	    <productname><ulink url="http://gitorious.org/fap/fap-snails"/></productname>
	    <title><xref linkend="gls_fap"/> demo application "Snails" git repository</title> </biblioentry>
    </bibliolist>


    <glossary> <title>Glossary</title> 
	<glossentry id="gls_dtds"><glossterm>DTDS</glossterm> <acronym>DTDS</acronym>
	    <glossdef> <para>Discrete Time Dynamic System </para> <glossseealso otherterm="gls_dtds1"/></glossdef> </glossentry>

	<glossentry id="gls_dtds1"><glossterm>Discrete Time Dynamic System</glossterm> <acronym>DTDS</acronym>
	    <glossdef> <para>The some phenomenom "black box" model based on input - internal states - output. 
		    Ref <xref linkend="ref_wiki_ds"/> for base info.</para> <glossseealso otherterm="gls_dtds"/></glossdef> </glossentry>

	<glossentry id="gls_dds"><glossterm>DDS</glossterm> <acronym>DDS</acronym>
	    <glossdef> <simpara>Discrete Dynamic System. One more term for <xref linkend="gls_dtds1"/></simpara> </glossdef> </glossentry>

	<glossentry id="gls_des"><glossterm>DES</glossterm> <acronym>DES</acronym>
	    <glossdef> <simpara>Discrete Event System - a class of <xref linkend="gls_dtds"/>,  discrete state, event driven dynamic system.</simpara> 
		<simpara>Ref <xref linkend="ref_cass_intr_des"/></simpara> </glossdef> </glossentry>

	<glossentry id="gls_desl"><glossterm>DESL</glossterm> <acronym>DESL</acronym>
	    <glossdef> <simpara>Discrete Event System general language - descirbes the structure of the system.
		    Ref <xref linkend="ref_ybor_using_des"/>, <xref linkend="ref_yb_deside1"/> 
		    for details and examples.  </simpara> </glossdef> </glossentry>

	<glossentry id="gls_dest"><glossterm>DEST</glossterm> <acronym>DEST</acronym>
	    <glossdef> <simpara>Discrete Event System transition language - functional language for variable transition 
		    in <xref linkend="gls_des"/> framework <xref linkend="gls_fap"/></simpara> </glossdef> </glossentry>

	<glossentry id="gls_finite_automata"><glossterm>FSA</glossterm> <acronym>FSA</acronym>
	    <glossdef> <simpara>Finite State automata</simpara> </glossdef> </glossentry>

	<glossentry id="gls_fap"><glossterm>FAP</glossterm> <acronym>FAP</acronym>
	    <glossdef> <simpara>Finite Automata Paradigm framework. The framework for SW development with using of 
		    <xref linkend="gls_finite_automata"/>paradigm.</simpara> 
		<simpara>Ref <xref linkend="ref_fap_git"/> for source code repository</simpara></glossdef> </glossentry>

    </glossary>

    <sect1 id="sec_intro"><title>Introduction</title>
	<simpara>In the <xref linkend="gls_fap"/> project the base <xref linkend="gls_des"/> framework 
	    was created, ref <xref linkend="ref_fap_git"/>. The framework uses the language for specifying the
	    base element of the system - variables (states), dependencies (variable inputs), connections etc. The framework enables to
	    use regular function written with C, C++, and referred from the system difinition. </simpara>
	<simpara>This approach is suitable only when the framework client is written in C or C++. The system in this case is combined 
	    from base application, transitions written in native language and the structure definition written 
	    on structural language like <xref linkend="gls_desl"/>. 
	    It would be more effecient if transitions are specified directly in system description, avoiding necessity of 
	    using native language in addition of the system definition.</simpara>
	<simpara>One of the approach of intermediate solution is described in <xref linkend="ref_yb_embtr"/>. In this solution the
	    transitions are defined in specific functional language and are "embedded" into system definition instead of 
	    being implemented in native code. This approach allows avoiding separation of the system definition to interpreted and native
	    parts but nevertheless requires specific interpreter of functional language for transitions.</simpara>
	<simpara>This article outlines the approach to unified definition for both system structure and transitions. 
	    We first inroduce the basics of unificaion system definition language. Then we consider the approach to multiagent architecture
	    for constructing DES.  Then we detalize the language and outline of how typical <xref linkend="gls_des"/> can be defined 
	    with using of the language in multiagent environment. 
	    And finally the we consider some <xref linkend="gls_des"/> models samples, and compare the "regular" and offered approaches.</simpara>
    </sect1>

    <sect1 id="sec_basics"><title>Basics of unified system description.</title>
	<simpara>System structure definition language construction depends on what atomary elements are used for creation of system. 
	    For instanle in <xref linkend="gls_desl"/> language these elementary components are state, transition, system, and connection.</simpara>
	<simpara>To get common language for all these parts it is required to compound them via common lower-layer base elements. So 
	    the base elements need to be defined as well as the mechanism of combining DES from them. 
	    The language then will be the means of specifying of DES components creation from base elements. Let's consider the base elements 
	    for transition functions. A function can be produced as combination of lower-level functions in form of tree, where the result
	    of child node is used as an argument of parent node. For instance, the function: </simpara>
	    <programlisting>
		f(x,y) = x*x + y*y,
	    </programlisting>
	    can be represented as
	    <programlisting>
		f(x,y) = f1(x) + f1(y), where f1(x) = x*x.
	    </programlisting>
	    <simpara>The lower-level functions in turn can be factorized into next level function, so this process of factorization 
		will be finalized on level of elementary functions. These are to be predefined and delievered as base structural elements of
		DES development means.</simpara>
	    <simpara>So syntactically the function can be described as  the set of "internal" functions
	    and net of "connections" that creates the required sequence of arguments transformation.</simpara>
	<simpara>This structure of transition basically gives some commonality for DES components. Let's consider the base element for combining
	    DES components. This element is to be able to include else elements in order to create more complex structures. So the elements 
	    hierarchy, where each element becomes the hierarchy node,  will create the DES components. It is 
	    sutable to use inheritance and changing as the mechanism of creating more complex structure from the elements. Also the element is to 
	    have "native" behavior. This is because the the real "source" of behavior of complex structures buit from the elements can 
	    only be native behavior of the structure comonents. Also the element needs to support of keeping some data (content) that can
	    be uses as parameters and variables of created structures. 
	    So the base capabilities of the element are as:</simpara>
	<itemizedlist>
	    <listitem>creation complex structure by combinig the elements</listitem>
	    <listitem>Inheritance and changing mechanism</listitem>
	    <listitem>Data storing</listitem>
	    <listitem>Native behaviour</listitem>
	</itemizedlist>
	<simpara>So the DES components and even the DES itself can be created as the net of simple elements posessed native behavior.
	    This structure can be represented as the set of simple agents interacting one to another with the means of the structured net. 
	    The agent native behavior can be defined in terms of native interfaces the agent implements. These native interfaces can be 
	    identified by the simple name. Some base interfaces  needs to be introduced and implemnted by 
	    any agents in order to support the generic element capabilities stated above.</simpara>
	<simpara>One of the language artefact is the reference to the nodes within the base hierarchy. This referece if defined if form of
	    URI.</simpara>
    </sect1>

    <sect1 id="sec_lang"><title>DES definition language</title>
	<sect2 id="sec_lang_synt"><title>Syntax notation</title>
	    <simpara>Let's consider the variant of the language that can be used for creation DES components from the elements with capabilities 
		stated above. The DES definition language can be based on xml. The following xml document definition can be used to support the 
		elements creation hierarchy and changing (mutation):</simpara>

	    <screen>
		<![CDATA[
		<!-- Mutation - addition -->
		<!ELEMENT add (node*)>

		<!-- Mutation - change content -->
		<!ELEMENT cont EMPTY>

		<!-- Mutation - moving -->
		<!ELEMENT move EMPTY>

		<!-- Mutation - Removing node -->
		<!ELEMENT rm EMPTY >

		<!-- Mutation - Changing node attribute-->
		<!ELEMENT change EMPTY >

		<!-- Element of base hierarchy -->
		<!ELEMENT node (node*, add*, rm*, change*, cont*, move*)* >

		<!-- Inherited node attributes: parent - parent ref, id - instance name -->
		<!ATTLIST node id CDATA #IMPLIED parent CDATA #IMPLIED>

		<!-- Adding node attributes: node - URI of mutated node -->
		<!ATTLIST add node CDATA #IMPLIED>
		]]>
	    </screen>

	    <simpara>It can be noted that from functionality point of view there is big gap between simple element and DES components.
		So it is required to define the imtermediate layers of components to simplify the DES components structure.</simpara>
	    <simpara>URI specifies path in base hierarchy with stating also inheritance chain. This is required to not restrict
		elements of adding components with the same name but different parents. Inheritance chaing is the sequence of names of 
		inherited nodes. The absolute form 
		The following form of URI can be used (EBNF notation):
	    </simpara>
	    <programlisting>
		uri = [hier_unit] , {hier_sep , hier_unit} ;
		hier_sep = "/" ;
		hier_unit = hier_chain | hier_upper;
		hier_upper = ".." ;
		hier_chain = id | ([id] , {inher_sep , id}) ;
		inher_sep = ":" ;
		id = patt_any | patt_anywhere | name;
		patt_any = "*" ;
		patt_anywhere = "**" ;
		name = character , {character} ;
	    </programlisting>
	    <simpara>The examples are:</simpara>
	    <programlisting>
		Vert:Vertex_1 - node named "Vertex_1" inherited from node "Vert"
	    </programlisting>
	</sect2>
    </sect1>

    <sect1 id="sec_arch"><title>Multiagent architecture</title>
	<simpara>Let's difine the hierarchy of architectural components. The xml notation as well as graphical notation will be used 
	    for convenience. Graphical notation will in form of UML diagram for native parts and multiagent architecture language 
	    specific notation for components built on multiagent architecture.</simpara>
	<sect2 id="sec_lang_base"><title>Base layer</title>
	    <simpara>Base layer introduces base element behavior. Element as an agent implements interfaces "MCompObserver" and "MMutable"
		to support generic element capabilities.</simpara>
	    <figure id="fig_elem"><title>Base layer</title><imageobject> <imagedata fileref="pics/elem.png"/> </imageobject></figure>
	    <simpara>To create multi-behavioral objects it is required to implement  mutliple interfaces for that. One way to do that 
		is to create single agent that implements all required interfaces. The problem here is that the agent is implemented on 
		native code layer and cannot be changed with the mutation of the structure of base hierarchy. To solve this problem the 
		approach can be used where the node includes many simple agents instead of inheriting one mutli-interfaces agent. In
		this case it is possible to add new behavior by mutating the node. There can be some approaches of including agents into the
		node. One and simplest of them is to have in the node dedicated predefined component that collects all the agents. 
		To react by the requested behavior base element agent redirects the proper interface requests to the "embedded" agents, 
		which handles the request by using the structure of the owning node. So the node in this case can be considered as
		multiple local agents that are "covered" by infrastructe provided by the node. This approach is used in the current
		implememtation of multiagent framework, the node containing the agents is named "Agents"</simpara>
	</sect2>
	<sect2 id="sec_lang_graph"><title>Graph layer</title>
	    <simpara>Graph layer introduces such behavior as relation. There are the three major components on this layer: property, vertex and 
		edge. Property just keeps the data because the base elements doesn't really implement the interface of keeping data but just 
		introdices it. Vertex is a single agent but edge is the compound including tho properties that contain references to 
		related vertexes.</simpara>
	    <figure id="fig_graph"><title>Graph layer class diagram</title>
		<imageobject> <imagedata fileref="pics/graph.png"/> </imageobject></figure>
	    <simpara>The relations can can be established vetex to vertex by proper mutation of edges properties. In the example below
		there are three vertexes and two relation established via two edges</simpara>
	    <screen>
		<![CDATA[
		<node id="root" parent="Vert">
		    <node id="Vertex_1" parent="Vert"/>
		    <node id="Vertex_2" parent="Vert"/>
		    <node id="Vertex_3" parent="Vert"/>
		    <node id="Edge_1" parent="Edge"/>
		    <cont node="Edge:Edge_1/Prop:P2" val="Vert:Vertex_1"/>
		    <cont node="Edge:Edge_1/Prop:P1" val="Vert:Vertex_2"/>
		    <node id="Edge_2" parent="Edge"/>
		    <cont node="Edge:Edge_2/Prop:P2" val="Vert:Vertex_1"/>
		    <cont node="Edge:Edge_2/Prop:P1" val="Vert:Vertex_3"/>
		</node>
		]]>
	    </screen>
	    <imageobject> <imagedata fileref="pics/graph_rel.png"/> </imageobject>
	</sect2>
	<sect2 id="sec_lang_syst"><title>System layer</title>
	    <simpara>System layer introduses connection point and system. Connection point is the component of system thru which the 
		system is seen outside. Connection point is single agent inherited from vertex and can be considered as a role of the system. 
		For that connection point posesses two properties that defined the interface provided by this connection point owner, and the
		the interface required for it.  </simpara>
	    <simpara> The system can play more that one roles. Since connection point is vertex then it is possible to establish relation
		between two connections points, i.e. to "connect" two systems. Connection point as agent implements also the interface
		MCompatChecker - compatibility checker, that allows the owned node managing the connection by denying the connection between
		incompatible connection points. </simpara>
	    <simpara>From systems relations point of view, connection point is just proxy allowing "colored" or "typed" relations. This
		is the mechanism of using multi-roled and multi-behavioral systems.</simpara>
	    <simpara>System is implemened as single agent inherited from Vert agent and reimplemented MCompObserver interface in order
		to customize the rules of creating relations between owned systems. For instance the system allows connecting included
		systems only via their connection points and only if the connection points are compatible. In the visual notation
	    the provided interface is noted as "P:", required as "R:"</simpara>
	    <imageobject> <imagedata fileref="pics/syst_cls.png"/> </imageobject>
	    <simpara></simpara>
	    <imageobject> <imagedata fileref="pics/syst_str.png"/> </imageobject>
	    <simpara>The properties witin connection point are named "Provided" and "Required" and stored names of interfaces that
		system provides and required for playing the role connection point is representing. The connection points are 
		considered as compatible only if provided interface of connectin point coinsides with required interface of the pair.
		In the examle below the system "John" plays role "Teacher" and the system "Mary" - role "Student". They can be 
	    connected because the connection points are compliant thus compatible.</simpara>
	    <imageobject> <imagedata fileref="pics/syst_example_1.png"/> </imageobject>
	    <imageobject> <imagedata fileref="pics/syst_example_1_john.png"/> </imageobject>
	    <imageobject> <imagedata fileref="pics/syst_example_1_mary.png"/> </imageobject>

	</sect2>

    </sect1>

    <sect1 id="sec_disc"><title>Discussion</title>
	<simpara>We have presented simple functional languge for transition function in the scope of DES general
	    languge.  We have shown solutions for the key algorithms of language interpretation.</simpara>
	<simpara>We outline the important use cases and approaches of how they can be implemented. 
	    Finally we compare transition functions implemented in C++ and DEST on simple demo application.</simpara>
	<simpara>We argue therefore that using the proposed language makes DES programs more compact and efficient.</simpara>
    </sect1>

</article>
